-*- mode: outline -*-
* Reimplementation of RAS Server.

The RAS server shall be reimplemented with respect to multi
threading of the RAS packet handling. The single threaded RAS
Server might be a target of a DoS attack, as it can be flooded
with RAS PDUs.

** General Thoughts

The H225Ras protocol  is a stateless protocol. Any packet
received by the gatekeeper will have exactly one return
packet. Of course, there may be some external source of data
(eg. LDAP or alternative/parent Gatekeeper).

If there is exactly one listener firing a working thread after
any packet received, there is only a small part of single
threaded code, whereas all the work is done multi threaded.

** Work to do

The old H323RasSrv class will keep its Main()-Routine and its
listener socket. There will be a new RasWorker class derived from
PThread in which the H323RasSrv working methods (aka On*) will be
moved to.

*** Implementation details

**** RasWorker

The RasWorker class will only have a Constructor in which the raw
PER-Stream from the RAS listener is interpreted. There will be
_NO_ way to have a RasWorker initialised without a RAS PDU.

The decoding of the PER Stream will be done in the worker thread,
now done in H323RasSrv::Main()

**** Ras Table Entries

The objects in the RAS table must be reentrant. So one has to
lock all member objects. Partially this is already done. We will
try to get a lock for each member. This lead be a more granular
locking to improve the speed of the whole RAS service.





 LocalWords:  Reimplementation RAS
