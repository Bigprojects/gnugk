<sect>Neighbor Configuration
<p>
<sect1>Section &lsqb;RasSrv::Neighbors&rsqb;
<label id="neighbor">
<p>
If the destination of an ARQ is unknown, the gatekeeper sends LRQs to
its neighbors to ask if they have the destination endpoint.
A neighbor is selected if one of its prefixes matches the destination
or it has the ``<tt/*/'' prefix. More than one prefix may be specified.
You can use special characters ``<tt/./''  to do wildcard
matching and ``<tt/!/'' to disable a specific prefix.

The gatekeeper will only reply to LRQs sent from neighbors defined in this section.
If you specify an empty SendPrefixes entry, no LRQ will be sent to that neighbor,
but the gatekeeper will accept LRQs from it.

The <tt/password/ field is used to authenticate LRQs from that neighbor.
See section <ref id="gkauth" name="[Gatekeeper::Auth]"> for details.

Whether a call is accepted from a neighbor also depends on the AcceptNeighborsCalls switch in the <ref id="routed" name="[RoutedMode]"> section.

The gatekeeper types have the following characteristics:
<itemize>
<item><tt/GnuGk/<newline>
When in doubt, use the <htmlurl url="http://www.gnugk.org/" name="GnuGk gatekeeper"> type. This also activates H.460.23 / H.460.24.

<item><tt/CiscoGk/<newline>
GnuGk will pretend to be a Cisco gatekeeper and send fake manufacturer data.

<item><tt/ClarentGk/<newline>
Clarent gatekeeper can't decode nonStandardData in LRQs, so GnuGk will filter it out.

<item><tt/GlonetGk/<newline>
Limited support for LRQ forwarding.
</itemize>

<descrip>
<tt>GKID="GnuGk" | "CiscoGk" | "ClarentGk" | "GlonetGk"</tt>
<p>
<tag/Example:/
<tt/[RasSrv::Neighbors]/<newline>
<tt/GK1=CiscoGk/<newline>
<tt/GK2=GnuGk/<newline>
<newline>
<tt/[Neighbor::GK1]/<newline>
<tt/GatekeeperIdentifier=GK1/<newline>
<tt/Host=192.168.1.1/<newline>
<tt/SendPrefixes=02/<newline>
<tt/AcceptPrefixes=*/<newline>
<tt/ForwardLRQ=always/<newline>
<newline>
<tt/[Neighbor::GK2]/<newline>
<tt/GatekeeperIdentifier=GK2/<newline>
<tt/Host=192.168.1.2/<newline>
<tt/SendPrefixes=03,0048/<newline>
<tt/AcceptPrefixes=0049,001/<newline>
<tt/ForwardHopCount=2/<newline>
<tt/ForwardLRQ=depends/<newline>
<newline>
</descrip>

The <tt/[RasSrv::Neighbors]/ section is only used to specify the gatekeeper type. The configuration for each neighbor is placed in a separate section.

<sect1>Section &lsqb;RasSrv::LRQFeatures&rsqb;
<label id="lrqfeatures">
<p>
Defines some features of LRQ and LCF.
<itemize>
<item><tt/NeighborTimeout=1/<newline>
Default: <tt/2/<newline>
<p>
Timeout value in seconds to wait for responses from neighbors.
If no neighbor responds before the timeout, the gatekeeper will
reply with an ARJ to the endpoint sending the ARQ.

<!-- TODO:  A better explanation of how NeighborTimeout and SendRetries interact? -->

<item><tt/SendRetries=4/<newline>
Default: <tt/2/<newline>
<p>
Number of tries to send LRQ to neighbors.
If there is no response from neighbors after retries timeout, the gatekeeper will
reply with a LRJ to the endpoint sending the LRQ.

<item><tt/ForwardHopCount=2/<newline>
Default: <tt>N/A</tt><newline>
<p>
If the gatekeeper receives a LRQ that the destination is unknown
it may forward this message to its neighbors.

When the gatekeeper receives a LRQ and decides that the message
should be forwarded on to another gatekeeper, it first decrements
<bf/hopCount/ field of the LRQ.
If <bf/hopCount/ has reached 0, the gatekeeper shall not forward the message.
This option defines the number of gatekeepers through which a LRQ
may propagate. Note that it only affects the sender of LRQ, not the forwarder.
This setting can be overridden via the configuration section for a particular neighbor.

<item><tt/AcceptForwardedLRQ=1/<newline>
Default: <tt/1/<newline>
<p>
Whether to accept an LRQ forwarded from neighbors.
This setting can be overridden with configuration
of a particular neighbor.

<item><tt/ForwardResponse=0/<newline>
Default: <tt/0/<newline>
<p>
If the gatekeeper forwards a received LRQ message it can decide either
to receive the LCF response or to let it travel back directly to the LRQ
originator. Set this option to 1 if the gatekeeper needs to receive LCF
messages for forwarded LRQs. This setting can be overridden with configuration
of a particular neighbor.

<item><tt/ForwardLRQ=always | never | depends/<newline>
Default: <tt/depends/<newline>
<p>
This settings determines whether the received LRQ should be forwarded
or not. <tt/always/ forwards LRQ unconditionally, <tt/never/ blocks LRQ
forwarding, <tt/depends/ tells the gatekeeper to forward LRQ only if its
hop count is greater than 1. This setting can be overridden with configuration
of a particular neighbor.

<item><tt/AcceptNonNeighborLRQ=1/<newline>
Default: <tt/0/<newline>
<p>
Whether to accept a LRQ forwarded from parties not defined as Neighbors.
This can be used with SRV routing policy to place calls to third party gatekeepers.
This should be used in conjunction with a LRQ Authentication policy.

<item><tt/AcceptNonNeighborLCF=1/<newline>
Default: <tt/0/<newline>
<p>
This setting disables matching of the LRQ responder's IP address and
specified neighbor IP addresses in order to accept LCF message responses
from any IP address. This has primary importance when a
multiple level gatekeeper hierarchy is used without routed Q.931 signaling.
As a minimal security, only LRQ/LCF sequence numbers will be checked accordingly. This feature is required by the
national gatekeepers connected to the Global Dialing Scheme (GDS), see
<url url="http://www.vide.net/help/gdsintro.shtml" name="http://www.vide.net/help/gdsintro.shtml">
for more information.
WARNING: Enabling receiving LCF from other than the LRQ destination IP is a significant security risk. 
Use this setting with extreme caution.
</itemize>



<sect1>Section &lsqb;Neighbor::...&rsqb;
<p>
Sections starting with <tt/[Neighbor::/ are specific for one neighbor.  If
you define a &lsqb;Neighbor::...&rsqb; section, the default values of all
settings in <ref id="lrqfeatures" name="[RasSrv::LRQFeatures]"> will be applied to
this neighbor.  You may override the global defaults through configuration options in
each neighbor-specific section.

<itemize>
<item><tt/GatekeeperIdentifier=GKID/<newline>
Default: <tt>N/A</tt><newline>
<p>
Gatekeeper identifier for this neighbor. If this option is not specified,
the identifier is taken from the second part of the <tt/Neighbor::/ section name.

<item><tt/Host=192.168.1.1/<newline>
Default: <tt>N/A</tt><newline>
<p>
An IP address for this neighbor.

<item><tt/Password=secret/<newline>
Default: <tt>N/A</tt><newline>
<p>
A password to be used to validate crypto tokens received from incoming LRQs.
<tt/Not yet implemented, yet./

<item><tt/Dynamic=0/<newline>
Default: <tt>0</tt><newline>
<p>
1 means that the IP address for this neighbor can change.

<item><tt/SendPrefixes=004,002:=1,001:=2/<newline>
Default: <tt>N/A</tt><newline>
<p>
A list of prefixes that this neighbor expects to receive LRQs for.
If '*' is specified, LRQs will always be sent to this neighbor.
A priority can be given to each prefix for each neighbor (using := syntax),
so in case of multiple LCF received from multiple neighbor, the one
with the highest priority will be selected to route the call.
One can also direct the gatekeeper to send LRQ to this neighbor
based on an alias type:<newline>
SendPrefixes=h323_ID,dialedDigits,001<newline>

<item><tt/SendAliases=4526354,2000-2010,frank/<newline>
Default: <tt>N/A</tt><newline>
<p>
A list of specific aliases this neighbor expects to receive LRQs for.
For E.164 numbers, ranges can be specified.

<item><tt/AcceptPrefixes=*/<newline>
Default: <tt>*</tt><newline>
<p>
A list of prefixes that GnuGk will accept in LRQs received
from this neighbor. If '*' is specified, all LRQs will be accepted from this neighbor.
One can also direct the gatekeeper to accept LRQ from this neighbor
based on an alias type:<newline>
AcceptPrefixes=dialedDigits<newline>

<item><tt/ForwardHopCount=2/<newline>
Default: <tt>N/A</tt><newline>
<p>
If the gatekeeper receives an LRQ that the destination is either unknown,
it may forward this message to its neighbors.
When the gatekeeper receives an LRQ and decides that the message
should be forwarded on to another gatekeeper, it first decrements
<bf/hopCount/ field of the LRQ.
If <bf/hopCount/ has reached 0, the gatekeeper shall not forward the message.
This options defines the number of gatekeepers through which an LRQ
may propagate. Note it only affects the sender of LRQ, not the forwarder.

<item><tt/AcceptForwardedLRQ=1/<newline>
Default: <tt/1/<newline>
<p>
Whether to accept an LRQ forwarded from this neighbor.

<item><tt/ForwardResponse=0/<newline>
Default: <tt/0/<newline>
<p>
If the gatekeeper forwards received LRQ message it can decide either
to receive the LCF response or to let it travel back directly to the LRQ
originator. Set this option to "1" if the gatekeeper needs to receive LCF
messages for forwarded LRQs.

<item><tt/ForwardLRQ=always | never | depends/<newline>
Default: <tt/depends/<newline>
<p>
This settings determines whether the received LRQ should be forwarded
or not. <tt/always/ forwards LRQ unconditionally, <tt/never/ blocks LRQ
forwarding, <tt/depends/ tells the gatekeeper to forward LRQ only if its
hop count is greater than 1.

<item><tt/UseH46018=1/<newline>
Default: <tt/0/<newline>
<p>
Enable H.460.18 keep-alive messages to this neighbor. Set this switch only on the H.460.18
client side that is supposed to send the keep-alive ServiceControlIndication (SCI) messages.

<item><tt/SendPassword=secret/<newline>
Default: <tt>N/A</tt><newline>
<p>


EXPERIMENTAL: The password to send to the neighbor (right now only used for H.460.18 SCI).

</itemize>

