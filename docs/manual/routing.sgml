<sect>Routing Configuration
<p>
The following sections in the config file can be used to configure how calls are routed.

<sect1>Section &lsqb;RoutingPolicy&rsqb;
<label id="routingpolicy">
<p>
This section explains how the various possible routing
policies within the gatekeeper work.

The incoming call requests can be routed using a number
of routing providers:

<itemize>

<item><tt/explicit/<newline>
<p>
The destination is explicitly specified in the routing
request.

<item><tt/internal/<newline>
<p>
The classical rule; search the destination in
RegistrationTable

<item><tt/parent/<newline>
<p>
Route the call using information sent by the parent GK in
reply to an ARQ the gatekeeper will send.

<item><tt/neighbor/<newline>
<p>
Route the call using neighbors by exchanging LRQ messages

<item><tt/dns/<newline>
<p>
The destination is resolved from DNS, provided it is
resolvable

<item><tt/vqueue/<newline>
<p>
Use the virtual queue mechanism and generate a RouteRequest
event to let an external application do the routing
(can only be used OnARQ)

</itemize>

If one policy does not match, the next policy is tried.

These policies can be applied to a number of routing request types,
and routing input data. The different types are:
ARQ, LRQ, Setup and Facility (with the callForwarded reason)
There is also the general routing policy, which is kind of a
default for the other types.

<descrip>
<tag/Example:/
<quote><tt>[RoutingPolicy]<newline>
h323_ID=dns,internal<newline>
002=neighbor,internal<newline>
Default=internal,neighbor,parent</tt></quote>
</descrip>

When one of the messages is received which calls for a routing
decision, all calls to an alias of the h323_ID type will be
resolved using DNS. If DNS fails to resolve the alias, it is
matched against the internal registration table. If a call is
requested to an alias starting with 002, first the neighbours
are checked and then the internal registration table. If the
requested alias is not an h323_ID or an alias starting with
002, the default policy is used by querying the internal
registration table, then the neighbours, and if that fails the
parent.

For the ARQ, LRQ, Setup and Facility messages one would use the
[RoutingPolicy::OnARQ], [RoutingPolicy::OnLRQ],
[RoutingPolicy::OnSetup] and [RoutingPolicy::OnFacility] sections
using the syntax explained above.


<sect1>Section &lsqb;RasSrv::RewriteE164&rsqb;
<label id="rewrite">
<p>
This section defines the rewriting rules for dialedDigits (E.164 number).

<descrip>
<tag/Format:/
<tt>[!]original-prefix=target-prefix</tt>
<p>
If the number is beginning with <tt/original-prefix/,
it is rewritten to <tt/target-prefix/.
If the `<tt/!/' flag precedes the <tt/original-prefix/, the sense is inverted
and the target-prefix is prepended to the dialed number. Special wildcard
characters (<tt/'.'/ and <tt/'%'/) are available.
<tag/Example:/
<tt/08=18888/
<p>
If you dial <tt/08345718/, it is rewritten to <tt/18888345718/.
<tag/Example:/
<tt/!08=18888/
<p>
If you dial <tt/09345718/, it is rewritten to <tt/1888809345718/.
</descrip>

Option:
<itemize>
<item><tt/Fastmatch=08/<newline>
Default: <tt>N/A</tt>
<p>
Only rewrite dialDigits beginning with the specified prefix.
</itemize>


<sect1>Section &lsqb;RasSrv::GWRewriteE164&rsqb;
<label id="gwrewrite">
<p>
This section describes rewriting the dialedDigits E.164 number depending on
the gateway a call has come from or is being sent to. This allows for more
flexible manipulation of the dialedDigits for routing etc. In combination
with the <ref id="rewrite" name="RasSrv::RewriteE164"> you can have triple
stage rewriting:

<tscreen><verb>
Call from "gw1", dialedDigits 0867822
		|
		|
		V
Input rules for "gw1", dialedDigits now 550867822
		|
		|
		V
Global rules, dialedDigits now 440867822
		|
		|
		V
Gateway selection, dialedDigits now 440867822, outbound gateway "gw2"
		|
		|
		V
Output rules for "gw2", dialedDigits now 0867822
		|
		|
		V
Call to "gw2", dialedDigits 0867822
</verb></tscreen>

<descrip>
<tag/Format:/
<tt>gw-alias=in|out=[!]original-prefix=target-prefix[;in|out...]</tt>
<p>
If the call matches the gateway, the direction and begins with
<tt/original-prefix/ it is rewritten to <tt/target-prefix/.
If the `<tt/!/' flag precedes the <tt/original-prefix/, the sense is inverted.
Special wildcard characters (<tt/'.'/ and <tt/'%'/) are available.
Multiple rules for the same gateway should be seperated by ';'.
<tag/Example:/
<tt/gw1=in=123=321/
<p>
If a call is received from "gw1" to <tt/12377897/, it is rewritten to <tt/32177897/
before further action is taken.
</descrip>


<sect1>Section &lsqb;Endpoint::RewriteE164&rsqb;
<p>
Once you specify prefix(es) for your gatekeeper endpoint, the parent
gatekeeper will route calls with <bf/dialedDigits/ beginning with that prefixes.
The child gatekeeper can rewrite the destination according to the rules
specified in this section. By contrast, when an internal endpoint calls
an endpoint registered to the parent gatekeeper, the source will be
rewritten reversely.

<descrip>
<tag/Format:/
<tt/external prefix=internal prefix/
</descrip>

For example, if you have the following configuration,

<tscreen><verb>
                        [Parent GK]
                        ID=CitronGK
                        /         \
                       /           \
                      /             \
                     /               \
                [Child GK]          [EP3]
                ID=ProxyGK          E164=18888200
                Prefix=188886
                /       \
               /         \
              /           \
           [EP1]         [EP2]
           E164=601      E164=602
</verb></tscreen>

With this rule:
<tscreen><verb>
188886=6
</verb></tscreen>

When EP1 calls EP3 by <tt/18888200/, the CallingPartyNumber in the Q.931 Setup
will be rewritten to <tt/18888601/. Conversely, EP3 can reach EP1 and EP2
by calling <tt/18888601/ and <tt/18888602/, respectively. In consequence, an
endpoint registered to the child GK with prefix '<tt/6/' will appear
as an endpoint with prefix '<tt/188886/', for endpoints registered to
the parent gatekeeper.

The section does not relate to the section
<ref id="rewrite" name="RasSrv::RewriteE164">,
though the later will take effect first.

