<sect>Configuración de la Autenticación
<p>
Las siguientes secciones en el archivo de configuración pueden ser utilizadas para configurar la Autentificación.

<sect1>Sección &lsqb;Gatekeeper::Auth&rsqb;
<label id="gkauth">
<p>
Esta sección define los mecanismos de autenticación para el gatekeeper.

<descrip>
<tag/Sintaxis:/
<tscreen><verb>
authrule=actions

 <authrule> := SimplePasswordAuth | AliasAuth | PrefixAuth | RadAuth | RadAliasAuth | ...
 <actions>  := <control>[;<ras>|<q931>,<ras>|<q931>,...]
 <control>  := optional | required | sufficient
 <ras>      := GRQ | RRQ | URQ | ARQ | BRQ | DRQ | LRQ | IRQ
 <q931>     := Setup | SetupUnreg

</verb></tscreen>
</descrip>
Una regla puede resultar en uno de los siguientes tres códigos: ok, fail, pass.
<itemize>
<item><tt/ok/ - La petición es autenticada por este módulo.
<item><tt/fail/ - La autenticación falla y debe ser rechazada.
<item><tt/next/ - La regla no puede determinar la petición.
</itemize>
También hay tres maneras de controlar una regla:
<itemize>
<item><tt/optional/ - Si la regla no puede determinar la petición, ésta es enviada a la siguiente regla.
<item><tt/required/ - La petición debe ser autenticada por este módulo, de lo contrario ésta sería rechazada. La petición autenticada entonces sería enviada hacia la siguiente regla.
<item><tt/sufficient/ - Si la petición es autenticada, ésta es aceptada, de lo contrario ésta sería rechazada. Es decir, la regla determina la suerte de la petición. Ninguna regla debe ser ubicada después de una regla sufficient, puesto que no tendrá ningún efecto.
</itemize>

Módulos soportados actualmente:
<itemize>
<item><tt>SimplePasswordAuth/SQLPasswordAuth</tt>
<p>
Estos módulos revisan los campos <bf/tokens/ or <bf/cryptoTokens/ de un mensaje RAS.
Los tokens deben contener al menos un generalID y un password.
Para aquellos tokens <bf/cryptoTokens/, <bf/cryptoEPPwdHash/ separados (hashed) por MD5 simple y
aquellos tokens <bf/nestedcryptoToken/ separados (hashed) por HMAC-SHA1-96 (libssl debe ser instalada)
hay soporte actualmente. Para tokens <bf/tokens/ separados (hashed) por CAT (Cisco Access Token)
y un username/password en texto claro son soportados actualmente.
El ID y password son leídos desde la sección <ref id="password" name="[SimplePasswordAuth]">,
y desde una base de datos SQL para los módulos <tt/SimplePasswordAuth/ y <tt/SQLPasswordAuth/.
El módulo <tt/MySQLPasswordAuth/ también es soportado.

<item><tt>AliasAuth/SQLAliasAuth</tt>
<p>
Este módulo puede ser utilizado solamente para auntenticar RegistrationRequest (RRQ).
La dirección IP de un endpoint con un alias dado deben corresponderse con un patrón específico.
Para <tt/AliasAuth/ el patrón está definido en la sección 
<ref id="rrqauth" name="[RasSrv::RRQAuth]">.
Para <tt/SQLAliasAuth/, el patrón es recuperado desde una base de datos SQL, 
que está definida en la sección <ref id="sqlaliasauth" name="[SQLAliasAuth]">.

<item><tt>PrefixAuth</tt>
<p>
La dirección IP o alias de una petición con un prefijo dado deben corresponderse o emparejarse con un patrón 
específico. Ver la sección <ref id="prefixauth" name="[PrefixAuth]"> para más detalle.
Actualmente el módulo puede autorizar solamente
AdmissionRequest (ARQ) y LocationRequest (LRQ).

<item><tt>RadAuth</tt>
<p>
Provee autenticación basada en el esquema de seguridad H.235 
username/password. Autentica RRQ, ARQ y Q.931 Setup mediante servidores
RADIUS remotos. Envía al Servidor RADIUS los usernames y passwords
extraídos desde los CAT (Cisco Access Tokens) <bf/tokens/ que viajan
dentro de los paquetes RRQ, ARQ o Setup. Por consiguiente si sus endpoints no
soportan CATs o usted no necesita el esquema de autenticación basado en usernames/password
asignados individualmente - este módulo no le servirá
(pero puede chequear además el módulo <tt/RadAliasAuth/).
Ver la sección <ref id="radauth" name="[RadAuth]"> para más detalle.

<item><tt>RadAliasAuth</tt>
<p>
Provee autenticación basada en alias de endpoints 
y/o direcciones IP con servidores remotos RADIUS.
Esto no necesita ningún <bf/tokens/ H.235 dentro de los mensajes RAS,
de esta manera esto puede ser utilizado sobre una amplia variedad de sistemas de igual manera como <tt/RadAuth/.
Los mensajes RRQ, ARQ y Q.931 Setup pueden ser autentificados utilizando este modulo.
Ver la sección <ref id="radaliasauth" name="[RadAliasAuth]"> para más detalle.

</itemize>
Usted puede además configurar una regla para chequear solamente algunos mensajes RAS particulares.
El siguiente ejemplo configura <tt/SimplePasswordAuth/ como regla opcional
para chequear mensajes RRQ y ARQ. Si un mensaje RRQ no es chequeado (no contiene
campos <bf/tokens/ o <bf/cryptoTokens/), éste es chequeado por <tt/AliasAuth/.
La regla por defecto es aceptar todas las peticiones.

<descrip>
<tag/Ejemplo 1:/
<tt/SimplePasswordAuth=optional;RRQ,ARQ/<newline>
<tt/AliasAuth=sufficient;RRQ/<newline>
</descrip>

El ejemplo mostrado más abajo autentica todas las llamadas, chequeando los mensajes de señalización Setup
de una manera detallada, utilizando el módulo RadAliasAuth.

<descrip>
<tag/Ejemplo 2:/
<tt/RadAliasAuth=required;Setup/<newline>
<tt/default=allow/
</descrip>

Este ejemplo chequea los mensajes de registro de endpoints (RRQ) y mensajes de admission de llamadas (ARQ)
por cualquiera de estos dos medios: por medio de un username/password (RadAuth) o mediante alias/IP (RadAliasAuth).
Adicionalmente, si la llamada es desde un endpoint no registrado (y por consiguiente
ninguna de las autenticaciones RRQ o ARQ ha sido realizada), La autenticación con mensajes Setup
usando RadAliasAuth toma lugar (SetupUnreg).

<descrip>
<tag/Ejemplo 3:/
<tt/RadAuth=optional;RRQ,ARQ/<newline>
<tt/RadAliasAuth=required;RRQ,ARQ,SetupUnreg/<newline>
<tt/default=allow/
</descrip>

<sect1>Sección &lsqb;SimplePasswordAuth&rsqb;
<label id="password">
<p>
La sección define el par de userid y password utilizados por
el módulo <tt/SimplePasswordAuth/. Todos los passwords estan encriptados
utilizando la utilidad <tt/addpasswd/.

Modo de uso:
<tscreen><verb>
addpasswd config section userid password
</verb></tscreen>

Opciones:
<itemize>
<item><tt/KeyFilled=123/<newline>
Default: <tt/0/
<p>
Valor por defecto para utilizar un byte de relleno durante la encriptación/desencriptación de passwords.

<item><tt/CheckID=1/<newline>
Default: <tt/0/
<p>
Verifica si el alias se corresponde con el ID en los tokens.

<item><tt/PasswordTimeout=120/<newline>
Default: <tt/-1/
<p>
El módulo <tt/SimplePasswordAuth/ y todos sus descendientes mantendrán en caché
los passwords auténticos. Este campo define el valor del tiempo de caché en segundos
<tt/0/ significa que no se utilizará caché para passwords, mientras que un valor negativo 
significa que la caché nunca expira.
</itemize>

<sect1>Sección &lsqb;SQLPasswordAuth&rsqb;
<label id="sqlpasswordauth">
<p>
Autentica endpoints (H.235 enabled) utilizando passwords almacenadas
en una base de datos SQL. Esta sección define el driver SQL a utilizar,
los parámetros de connexion a la base de datos y las consultas a utilizar para recuperar passwords.

<itemize>
<item><tt/Driver=MySQL | PostgreSQL/<newline>
Default: N/A
<p>
El driver SQL a utilizar. Actualmente, drivers <tt/MySQL/ and <tt/PostgreSQL/
estan implementados.

<item><tt/Host=DNS[:PORT] | IP[:PORT]/<newline>
Default: <tt/localhost/
<p>
Dirección del host SQL server. Puede estar en la forma de <tt/DNS[:PORT]/ o <tt/IP[:PORT]/.
Como <tt/sql.mycompany.com/ o <tt/sql.mycompany.com:3306/ o <tt/192.168.3.100/.

<item><tt/Database=billing/<newline>
Default: <tt/billing/
<p>
El nombre de la base de datos a la cual se realiza la conexión.

<item><tt/Username=gnugk/<newline>
<p>
El username utilizado para conectarse a la base de datos.

<item><tt/Password=secret/<newline>
<p>
El password utilizado para conectarse a la base de datos.
Si el password no está especificado, se realiza un intento de conexión 
a la base de datos sin un password.
Si <tt/EncryptAllPasswords/ está habilitada, o una variable <tt/KeyFilled/ esta definida
en esta sección, el password esta en forma encriptada y puede ser creado utilizando la 
utilidad <tt/addpasswd/.

<item><tt/CacheTimeout=120/<newline>
Default: <tt/0/
<p>
Este campo define que tiempo el par (alias;password) recuperados desde la base de datos 
estarán cacheados en la memoria local. Este valor es expresado en segundos.
<tt/0/ significa no cachear las passwords, mientras que un valor negativo
significa que la caché nunca expira (solamente el comando <tt/reload/ refrescará la caché).

<item><tt/MinPoolSize=5/<newline>
Default: <tt/1/
<p>
Define el número de conexiones activas SQL. Esto permite un mejor rendimiento,
puesto que más de una consulta puede ser ejecutada 
al mismo tiempo. <tt/MinPoolSize=1/ simula un viejo comportamiento, 
cuando el acceso a la base de datos es serializada (una consulta a la vez).

<item><tt/Query=SELECT .../<newline>
Default: <tt>N/A</tt>
<p>
Define la consulta SQL utilizada para recuperar passwords H.235 desde la base de datos. La consulta
es parametrizada, eso significa que el reemplazo de parámetros es realizado antes de que cada consulta
es ejecutada. Los parámetros están denotados por cadenas <bf/%1/, <bf/%2/, ...
Especifique %% para insertar un caracter de porcentaje antes de un dígito dentro de un string (así <bf/%%1/),
especifique <bf/%{1}/ para permitir expansión dentro de expresiones complejas como <bf/%{1}123/.
Para <tt/SQLPasswordAuth/ se han definido dos parámetros:
<itemize>
<item><tt/%1/ - El alias actual para el cual se consultará el password
<item><tt/%2/ - El identificador del gatekeeper
</itemize>
<p>
Aquí algunas cadenas de ejemplo:
<tscreen><verb>
SELECT h235password FROM users WHERE alias = '%1' AND active
SELECT h235password FROM users WHERE alias = '%1' AND gk = '%2'
</verb></tscreen>

</itemize>

<sect1>Sección &lsqb;RasSrv::RRQAuth&rsqb;
<label id="rrqauth">
<p>
Especifica la acción sobre los mensajes de recepción (confirm or deny) para el módulo <tt/AliasAuth/.
El primer alias (éste será principalmente un H323ID) del endpoint a ser
registrado es buscado en esta sección. Si un parámetro es encontrado, el valor sera
aplicado por regla general. Una regla consiste de condiciones separadas por "&".
Un registro es aceptado cuando todas las condiciones coinciden.

<descrip>
<tag/Sintaxis:/
<tscreen><verb>
&lt;authrules&gt; :=  empty  |  &lt;authrule&gt; "&" &lt;authrules&gt;

  &lt;authrule&gt;  := &lt;authtype&gt; ":" &lt;authparams&gt;
  &lt;authtype&gt;  := "sigaddr" | "sigip"
  &lt;autparams&gt; := [!&]*
</verb></tscreen>
</descrip>

La notación y significado de <tt/&lt;authparams&gt;/ depende de
<tt/&lt;authtype&gt;/:

<itemize>
<item><tt/sigaddr/ - Expresión regular extendida que tiene que corresponderse contra
la representación ''PrintOn(ostream)'' de la petición.
<p>
Ejemplo
<tscreen><verb>
sigaddr:.*ipAddress .* ip = .* c0 a8 e2 a5 .*port = 1720.*
</verb></tscreen>

<item><tt/sigip/ - Forma especializada de '<tt/sigaddr/'.
Escribe la dirección ip utilizando la notación decimal (comunmente utilizada):
''<tt/byteA.byteB.byteC.byteD:port/''.
<p>
Ejemplo:
<tscreen><verb>
sigip:192.168.242.165:1720
</verb></tscreen>

<item><tt/allow/ - Siempre aceptar el alias.

<item><tt/deny/ - Siempre rechazar el alias.

</itemize>

<sect1>Sección &lsqb;SQLAliasAuth&rsqb;
<label id="sqlaliasauth">
<p>
Autentica endpoints utilizando reglas almacenadas en una base de datos
(Las reglas tienen el mismo formato definido en la sección <ref id="rrqauth" name="[RasSrv::RRQAuth]">).
Esta sección define el driver SQL a ser utilizado, los parámetros de conexión a la base de datoS
y las consultas a utilizar para recuperar los patroneS.

<itemize>
<item><tt/Driver=MySQL | PostgreSQL/<newline>
Default: N/A
<p>
El driver SQL a utilizar. Actualmente, drivers <tt/MySQL/ and <tt/PostgreSQL/
estan implementados.

<item><tt/Host=DNS[:PORT] | IP[:PORT]/<newline>
Default: <tt/localhost/
<p>
Dirección del host SQL server. Puede estar en la forma de <tt/DNS[:PORT]/ o <tt/IP[:PORT]/.
Como <tt/sql.mycompany.com/ o <tt/sql.mycompany.com:3306/ o <tt/192.168.3.100/.

<item><tt/Database=billing/<newline>
Default: <tt/billing/
<p>
El nombre de la base de datos a la cual se realiza la conexión.

<item><tt/Username=gnugk/<newline>
<p>
El username utilizado para conectarse a la base de datos.

<item><tt/Password=secret/<newline>
<p>
El password utilizado para conectarse a la base de datos.
Si el password no está especificado, se realiza un intento de conexión 
a la base de datos sin un password.
Si <tt/EncryptAllPasswords/ está habilitada, o una variable <tt/KeyFilled/ esta definida
en esta sección, el password esta en forma encriptada y puede ser creado utilizando la 
utilidad <tt/addpasswd/.

<item><tt/CacheTimeout=120/<newline>
Default: <tt/0/
<p>
Este campo define que tiempo el par (alias;password) recuperados desde la base de datos 
estarán cacheados en la memoria local. Este valor es expresado en segundos.
<tt/0/ significa no cachear las passwords, mientras que un valor negativo
significa que la caché nunca expira (solamente el comando <tt/reload/ refrescará la caché).

<item><tt/MinPoolSize=5/<newline>
Default: <tt/1/
<p>
Define el número de conexiones activas SQL. Esto permite un mejor rendimiento,
puesto que más de una consulta puede ser ejecutada 
al mismo tiempo. <tt/MinPoolSize=1/ simula un viejo comportamiento, 
cuando el acceso a la base de datos es serializada (una consulta a la vez).

<item><tt/Query=SELECT .../<newline>
Default: <tt>N/A</tt>
<p>
Define la consulta SQL utilizada para recuperar alias desde la base de datos. La consulta
es parametrizada, eso significa que el reemplazo de parámetros es realizado antes de que cada consulta
es ejecutada. Los parámetros están denotados por cadenas <bf/%1/, <bf/%2/, ...
Especifique %% para insertar un caracter de porcentaje antes de un dígito dentro de un string (así <bf/%%1/),
especifique <bf/%{1}/ para permitir expansión dentro de expresiones complejas como <bf/%{1}123/.
Para <tt/SQLPasswordAuth/ se han definido dos parámetros:
<itemize>
<item><tt/%1/ - El alias actual para el cual se consultara el password
<item><tt/%2/ - El identificador del gatekeeper
</itemize>
<p>Aquí algunas consultas de ejemplo:
<tscreen><verb>
SELECT authrule FROM users WHERE alias = '%1' AND active
SELECT 'sigip:' || host(ip) || port FROM users WHERE alias = '%1'
</verb></tscreen>

</itemize>


<sect1>Sección &lsqb;PrefixAuth&rsqb;
<label id="prefixauth">
<p>
La sección define la regla de autenticación para el módulo <tt/PrefixAuth/.
Actualmente, solamente ARQs y LRQs pueden ser autorizados por éste módulo.

Primero, se selecciona un prefijo muy específico de acuerdo al campo <bf/destinationInfo/
de la petición recibida. Entonces la petición es aceptada o rechazada
de acuerdo a la correspondencia de reglas con la netmask más específica.
Si no se encontraron correspondencias de prefijos,
y la opción <tt/default/ está especificada, la petición es aceptada
o rechazada de acuerdo a eso. De lo contrario
esta es rechazada o pasada al siguiente módulo de autenticación
de acuerdo a los requerimientos del módulo.

<descrip>
<tag/Formato:/
<tscreen><verb>
prefix=authrule[|authrule|...]
</verb></tscreen>

<tag/Syntax:/
<tscreen><verb>
&lt;authrule&gt; :=  &lt;result&gt; &lt;authrule&gt;

  &lt;result&gt;    := deny | allow
  &lt;authrule&gt;  := [!]ipv4:&lt;iprule&gt; | [!]alias:&lt;aliasrule&gt;
</verb></tscreen>
</descrip>
Donde <tt/&lt;iprule&gt;/ puede ser específicada en notación decimal punteada o
en la notación CIDR, <tt/&lt;aliasrule&gt;/ está expresada en espreción regular.
Si el signo '<tt/!/' precede la regla, el sigificado es inverso.

<descrip>
<tag/Ejemplo:/
<tscreen><verb>
555=deny ipv4:10.0.0.0/27|allow ipv4:0/0
5555=allow ipv4:192.168.1.1|deny ipv4:192.168.1.0/255.255.255.0
86=deny !ipv4:172.16.0.0/24
09=deny alias:^188884.*
ALL=allow ipv4:ALL
</verb></tscreen>
</descrip>

En esta configuración, todos los endpoints excepto los de la red <tt>10.0.0.0/27</tt>
están permitidos llamar al prefijo 555 (excepto 5555).
A Endpoints desde <tt>192.168.1.0/24</tt> no se les permite llamar al prefijo 5555,
excepto <tt/192.168.1.1/.
Endpoints que<bf/no/ pertenecen a <tt>172.16.0.0/24</tt> no se les permite llamar al prefijo 86.
Endpoints que tienen un alias que empieza con 188884 no se les permite llamar al
prefijo 09. Todas las otras situaciones estan permitidas.

<sect1>Sección &lsqb;RadAuth&rsqb;
<label id="radauth">
<p>
Esta sección define la configuración que posibilitan la
autenticación RADIUS basada en H.235 CATs (Cisco Access Tokens)
presentes en las peticiones RRQ, ARQ RAS y mensajes Q.931 Setup.
<itemize>
<item><tt/Servers=SERVER1[:AUTH_PORT[:ACCT_PORT[:SECRET]]];SERVER2[:AUTH_PORT[:ACCT_PORT[:SECRET]]];.../<newline>
Default: <tt>N/A</tt>
<p>
Los servidores RADIUS a ser utilizados para la autenticación. La lista puede contener un número
arbitrario de servidores. El órden de los servidores es importante, porque los servidores
serán interrogados por el módulo RADIUS en el órden dado. Si no se indica información del 
puerto, el número de puerto especificado en <tt/DefaultAuthPort/ será utilizado. Si tampoco se especifica el secret, 
el shared secret por defecto especificado en <tt/SharedSecret/ es utilizado. 
Los nombres de los servidores pueden ser direcciones IP o nombres DNS.

<descrip>
<tag>Sample <tt/Servers/ lines:</tag>
<tt>Servers=192.168.1.1</tt><newline>
<tt>Servers=192.168.1.1:1645</tt><newline>
<tt>Servers=192.168.1.1:1645:1646:secret1</tt><newline>
<tt>Servers=radius1.mycompany.com:1812</tt><newline>
<tt>Servers=radius1.mycompany.com;radius2.mycompany.com</tt><newline>
<tt>Servers=radius1.mycompany.com:1812:1813:secret1;radius2.mycompany.com:1812:1813:secret2</tt><newline>
</descrip>

<item><tt/LocalInterface=IP_OR_FQDN/<newline>
Default: <tt>N/A</tt>
<p>
Interfaz de red local particular que el cliente RADIUS debe
utilizar para comunicarse con los servidores RADIUS. Este parámetro
puede ser útil en máquinas NAT para restringir números de interfaces
de red utilizados para la comunicación RADIUS. Por defecto este valor
es vacío y permite a la peticione RADIUS ser enviadas a cualquier (la que mejor conviene)
interfaz de red. Si usted no esta seguro de lo que está haciendo, es
mejor dejar esta opción sin establecer.

<item><tt/RadiusPortRange=10000-11000/<newline>
Default: <tt>N/A</tt>
<p>
Por defecto (si esta opción no está establecida) el cliente RADIUS
asigna puertos dinámicamente según lo especificado por el sistema operativo.
Si usted desea restringir a cliente RADIUS a utilizar solamente 
puertos de un rango particular, fije este parámetro.

<item><tt/DefaultAuthPort=PORT_NO/<newline>
Default: <tt>1812</tt>
<p>
Número de puerto por defecto que será utilizado para las peticiones de autenticacion RADIUS
(Access-Request packets), if not overriden by <tt/Servers/ attribute.

<item><tt/SharedSecret=SECRET/<newline>
Default: <tt>N/A (empty string)</tt>
<p>
Secret utilizada para autenticar éste GnuGk (cliente NAS) con el servidor
RADIUS. Este debe ser un password criptográficamente fuerte. Este es el valor
por defecto utilizado, si no se colocó un secret específico en el parámetro <tt/Servers/.
Si <tt/EncryptAllPasswords/ está habilitada, o la variable <tt/KeyFilled/ está definida
en esta sección, el password está en forma encriptada y debería ser creado utilizando
la utilidad <tt/addpasswd/.

<item><tt/RequestTimeout=TIMEOUT_MS/<newline>
Default: <tt/2000/ (miliseconds)
<p>
Tiempo de descanso (tiempo en milisegundos) para que el servidor RADIUS responda a una petición
enviada por el GnuGk. Si no se recibe ninguna respuesta dentro de este período de tiempo,
el siguiente servidor RADIUS es consultado.

<item><tt/IdCacheTimeout=TIMEOUT_MS/<newline>
Default: <tt/9000/ (miliseconds)
<p>
Tiempo de descanso (tiempo en milisegundos) para que identificadores de 8-bits de la petición RADIUS
sea única. Si el rango de identificadores de 8-bits se agota dentro de este período de tiempo
un nuevo socket cliente (socket UDP) es asignado por el módulo RADIUS. Tomemos
el ejemplo: Tenemos aproximadamente 60 RRQs/segundo; después de 4 segundos
el rango de identificadores de 8-bits se agota; se asigna un nuevo socket; después de los
siguientes 4 segundos, el segundo rango de identificadores de 8-bits se agota; un tercer socket
es asignado; después del noveno segundo, identificadores del pool 1 estan disponibles otra vez
- ... . En general, descanso demasiado largo - demasiados recursos consumidos,
descanso demasiado corto - El servidor RADIUS puede tomar los paquetes entrantes como duplicados
y por lo tanto borrarlos.

<item><tt/SocketDeleteTimeout=TIMEOUT_MS/<newline>
Default: <tt/60000/ (miliseconds) - 60 s
<p>
Tiempo de descanso (milisegundos) para que sockets RADIUS no utilizados sean cerrados. Este es utilizado
conjuntamente con <tt/IdCacheTimeout/ - sockets adicionales
creados durante los períodos pesados de carga del GK para atender peticiones
entrantes. Estos sockets son cerrados durante los períodos ociosos. 

<item><tt/RequestRetransmissions=NUMBER/<newline>
Default: <tt/2/
<p>
El número de veces en que una simple petición RADIUS es transmitida a cada
servidor RADIUS configurado (si no se recibe respuesta). 1 significa
no retransmisión, 2 retransmisión simple, ... . El método exácto de retransmisión
es definido por el atributo <tt/RoundRobinServers/.

<item><tt/RoundRobinServers=BOOLEAN/<newline>
Default: <tt/1/
<p>
Método de retransmisión de peticiones RADIUS.
<p>
Si se fija en 1, la petición RADIUS
es transmitida de la siguiente manera (Hasta que se recibe respuesta):
<tscreen><verb>
Server #1 Attempt #1, Server #2 Attempt #1, ..., Server #N Attempt #1
...
Server #1 Attempt #RequestRetransmissions, ..., Server #1 Attempt #RequestRetransmissions
</verb></tscreen>
<p>
Si se fija en 0, se preserva la siguiente secuencia:
<tscreen><verb>
Server #1 Attempt #1, ..., Server #1 Attempt #RequestRetransmissions
...
Server #N Attempt #1, ..., Server #N Attempt #RequestRetransmissions
</verb></tscreen>

<item><tt/AppendCiscoAttributes=BOOLEAN/<newline>
Default: <tt/0/
<p>
En el caso de que se fije, un atributo Cisco Vendor Specific RADIUS se incluye
en la petición RADIUS (h323-conf-id,h323-call-origin,h323-call-type).

<item><tt/IncludeTerminalAliases=BOOLEAN/<newline>
Default: <tt/1/
<p>
En el caso de que se fije, un atributo Cisco VSA 'h323-ivr-out' es enviado con una lista de alias
con que el endpoint se esta registrando (RRQ.m_terminalAlias). Este atributo se utiliza
para proveer un control detallado sobre la lista de alias con los cuales el endpoint
es pemitido registrarse. El formato de este atributo es el siguiente:
<tscreen><verb>
	Cisco-AV-Pair = "h323-ivr-out=terminal-alias:" alias [,alias] [;]
Example:
	Cisco-AV-Pair = "h323-ivr-out=terminal-alias:helpdesk,support,77771;"
</verb></tscreen>

<item><tt/UseDialedNumber=BOOLEAN/<newline>
Default: <tt/0/
<p>
Seleccione el tipo de número Called-Station-Id entre el original (según lo marcado
por el usuario) - <tt/UseDialedNumber=1/ - y el reescrito - <tt/UseDialedNumber=0/.

</itemize>

<sect1>Section &lsqb;RadAliasAuth&rsqb;
<label id="radaliasauth">
<p>
En esta sección se definen parámetros de configuración que permiten
la autenticación RADIUS basada en alias de endpoints y/o direcciones IP
presentes en las peticiones RAS o en las peticiones Setup Q.931.
Este esquema de autenticación es muy utilizado tanto para endpoints registrados
en el gatekeeper (ARQ,RRQ) como para llamadas que vienen desde endpoints no registrados(Setup).

<itemize>
<item><tt/Servers=SERVER1[:AUTH_PORT[:ACCT_PORT[:SECRET]]];SERVER2[:AUTH_PORT[:ACCT_PORT[:SECRET]]];.../<newline>
Default: <tt>N/A</tt>
<p>
Servidores RADIUS que van a ser utilizados para autenticación de peticiones RAS.
Esta lista puede contener un número arbitrario de servidores. El órden de los servidores
es importante, porque los servidores serán interrogados por el módulo RADIUS
en el órden dado. Si no se indica información del puerto, el número de puerto especificado 
en <tt/DefaultAuthPort/ será utilizado. Si tampoco se especifica el secret, 
el shared secret por defecto especificado en <tt/SharedSecret/ es utilizado. 
Los nombres de los servidores pueden ser direcciones IP o nombres DNS.

<descrip>
<tag/Example:/
<tt/Servers=192.168.3.1:1645;192.168.3.2:1812:1813:mysecret;radius.mycompany.com/
</descrip>

<item><tt/LocalInterface=IP_OR_FQDN/<newline>
Default: <tt>N/A</tt>
<p>
Interfaz de red local particular que el cliente RADIUS debe
utilizar para comunicarse con los servidores RADIUS. Este parámetro
puede ser útil en máquinas NAT para restringir números de interfaces
de red utilizados para la comunicación RADIUS. Por defecto este valor
es vacío y permite a la peticione RADIUS ser enviadas a cualquier (la que mejor conviene)
interfaz de red. Si usted no esta seguro de lo que está haciendo, es
mejor dejar esta opción sin establecer.

<item><tt/RadiusPortRange=10000-11000/<newline>
Default: <tt>N/A</tt>
<p>
Por defecto (si esta opción no está establecida) el cliente RADIUS
asigna puertos dinámicamente según lo especificado por el sistema operativo.
Si usted desea restringir a cliente RADIUS a utilizar solamente
puertos de un rango particular, fije este parámetro.

<item><tt/DefaultAuthPort=PORT_NO/<newline>
Default: <tt>1812</tt>
<p>
Número de puerto por defecto que será utilizada para las peticiones de autenticacion RADIUS
(Access-Request packets), if not overriden by <tt/Servers/ attribute.

<item><tt/SharedSecret=SECRET/<newline>
Default: <tt>N/A (empty string)</tt>
<p>
Secret utilizada para autenticar éste GnuGk (cliente NAS) con el servidor
RADIUS. Este debe ser un password criptográficamente fuerte. Este es el valor
por defecto utilizado, si no se colocó un secret específico en el parámetro <tt/Servers/.
Si <tt/EncryptAllPasswords/ está habilitada, o la variable <tt/KeyFilled/ está definida
en esta sección, el password está en forma encriptada y debería ser creado utilizando
la utilidad <tt/addpasswd/.

<item><tt/RequestTimeout=TIMEOUT_MS/<newline>
Default: <tt/2000/ (miliseconds)
<p>
Tiempo de descanso (tiempo en milisegundos) para que el servidor RADIUS responda a una petición
enviada por el GnuGk. Si no se recibe ninguna respuesta dentro de este período de tiempo,
el siguiente servidor RADIUS es consultado.

<item><tt/IdCacheTimeout=TIMEOUT_MS/<newline>
Default: <tt/9000/ (miliseconds)
<p>
Tiempo de descanso (tiempo en milisegundos) para que identificadores de 8-bits de la petición RADIUS
sea única. Si el rango de identificadores de 8-bits se agota dentro de este período de tiempo
un nuevo socket cliente (socket UDP) es asignado por el módulo RADIUS. Tomemos
el ejemplo: Tenemos aproximadamente 60 RRQs/segundo; después de 4 segundos
el rango de identificadores de 8-bits se agota; se asigna un nuevo socket; después de los
siguientes 4 segundos, el segundo rango de identificadores de 8-bits se agota; un tercer socket
es asignado; después del noveno segundo, identificadores del pool 1 estan disponibles otra vez
- ... . En general, descanso demasiado largo - demasiados recursos consumidos,
descanso demasiado corto - El servidor RADIUS puede tomar los paquetes entrantes como duplicados
y por lo tanto borrarlos.

<item><tt/SocketDeleteTimeout=TIMEOUT_MS/<newline>
Default: <tt/60000/ (miliseconds) - 60 s
<p>
Tiempo de descanso (milisegundos) para que sockets RADIUS no utilizados sean cerrados. Este es utilizado
conjuntamente con <tt/IdCacheTimeout/ - sockets adicionales
creados durante los períodos pesados de carga del GK para atender peticiones
entrantes. Estos sockets son cerrados durante los períodos ociosos. 

<item><tt/RequestRetransmissions=NUMBER/<newline>
Default: <tt/2/
<p>
El número de veces en que una simple petición RADIUS es transmitida a cada
servidor RADIUS configurado (si no se recibe respuesta). 1 significa
no retransmisión, 2 retransmisión simple, ... . El método exácto de retransmisión
es definido por el atributo <tt/RoundRobinServers/.

<item><tt/RoundRobinServers=BOOLEAN/<newline>
Default: <tt/1/
<p>
Método de retransmisión de peticiones RADIUS.
<p>
Si se fija en 1, la petición RADIUS
es transmitida de la siguiente manera (Hasta que se recibe respuesta):
<tscreen><verb>
Server #1 Attempt #1, Server #2 Attempt #1, ..., Server #N Attempt #1
...
Server #1 Attempt #RequestRetransmissions, ..., Server #1 Attempt #RequestRetransmissions
</verb></tscreen>
<p>
Si se fija en 0, se preserva la siguiente secuencia:
<tscreen><verb>
Server #1 Attempt #1, ..., Server #1 Attempt #RequestRetransmissions
...
Server #N Attempt #1, ..., Server #N Attempt #RequestRetransmissions
</verb></tscreen>

<item><tt/AppendCiscoAttributes=BOOLEAN/<newline>
Default: <tt/0/
<p>
En el caso de que se fije, un atributo Cisco Vendor Specific RADIUS se incluye
en la petición RADIUS (h323-conf-id,h323-call-origin,h323-call-type).

<item><tt/IncludeTerminalAliases=BOOLEAN/<newline>
Default: <tt/1/
<p>
En el caso de que se fije, un atributo Cisco VSA 'h323-ivr-out' es enviado con una lista de alias
con que el endpoint se esta registrando (RRQ.m_terminalAlias). Este atributo se utiliza
para proveer un control detallado sobre la lista de alias con los cuales el endpoint
es pemitido registrarse. El formato de este atributo es el siguiente:
<tscreen><verb>
	Cisco-AV-Pair = "h323-ivr-out=terminal-alias:" alias [,alias] [;]
Example:
	Cisco-AV-Pair = "h323-ivr-out=terminal-alias:helpdesk,support,77771;"
</verb></tscreen>

<item><tt/FixedUsername/<newline>
Default: <tt>N/A</tt>
<p>
Si este parámetro está activado, éste se superpone sobre el valor del atributo User-Name RADIUS
para peticiones RADIUS salientes. Eso significa que cada Access-Request se
autenticará en cuanto al usuario <tt/FixedUsername/.

<item><tt/FixedPassword/<newline>
Default: <tt>N/A</tt>
<p>
Si no esta activada esta opción, User-Password es una copia de User-Name. Por ejemplo, si User-Name
es 'john' entonces el valor de User-Password será también 'john'. Activar este
parámetro sustituye este comportamiento y el atributo User-Password será
siempre establecido al valor de <tt/FixedPassword/.
Si <tt/EncryptAllPasswords/ está habilitada, o la variable <tt/KeyFilled/ está definida
en ésta sección, el password está en forma encriptada y debe ser creada utilizando
la utilidad <tt/addpasswd/.

<descrip>
<tag/Ejemplo 1:/
<tscreen><verb>
(Ni FixedUsername o FixedPassword activadas)
</verb></tscreen>
Todos los endpoints se autenticarán utilizando sus alias como username
y el password. Eso significa, por ejemplo, endpoint 'EP1' se autenticará
con el username 'EP1 y el password 'EP1'.
</descrip>

<descrip>
<tag/Ejemplo 2:/
<tscreen><verb>
(FixedUsername no activado)
FixedPassword=ppp
</verb></tscreen>
Todos los endpoints se autenticarán utilizando como alias y passwords la palabra 'ppp'.
</descrip>

<descrip>
<tag/Ejemplo 3:/
<tscreen><verb>
FixedUsername=ppp
FixedPassword=ppp
</verb></tscreen>
Todos los endpoints se autenticarán utilizando como username la palabra 'ppp'
y como password la palabra 'ppp'.
</descrip>

<item><tt/UseDialedNumber=BOOLEAN/<newline>
Default: <tt/0/
<p>
Seleccione el número Called-Station-Id entre el original (como marcado 
por el usuario) - <tt/UseDialedNumber=1/ - y el sustituto - <tt/UseDialedNumber=0/.
</itemize>

