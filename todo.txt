TODO
====

This list of missing features and bugs is meant as a starting point
for people who wish to contribute to this project.
I'll add a note if somebody is already working on a project to
avoid duplicate work.

- feature: make "browse up the LDAP tree for attributes not found in leaf" a
           configurable feature

- feature: make DropCallsByReleaseComplete a per-endpoint option

- fix: When receiving DRQ before Release Complete, generating DRQs and/or Release Complete
       (dependant on DropCallsByReleaseComplete setting) "forgets" about cause codes

- feature: implement blacklists (caller-, callee-dependant)
           The order that black- and whitelist entries are applied is defined
           by the endpoint property voIPWhiteListBeforeBlackList. Default
           is that blacklist takes precedence.
           voIPIncoming*List needs to be implemented

- feature: add ability to use routing via neighbour for known destinations, too
           Neighbours should be configured && handled like gateways (i.e. they're
           configured to be used as the destination if one of their prefixes matches),
           just that they're contacted via LRQ before sending SETUP (unlike gateways
           which are directly sent a SETUP).
	   Currently neighbours ar only queried if no other endpoint matches. That
           prevents using trunk gateways with "catch-all" prefixes like 09 if 0900
           shall be routed via a neighbour.

- feature: implement metric based routing

  A metric should be configurable as a per-route per-gateway parameter, too,
  to allow for least cost routing.
  Available metrics range from "1" (best) to "99" (worst). Default is "50".

  The routing decision will then be made as follows:

  a) query portability database to get destination's carrier code
  b) select all gateways with that carrier code
  c) get metrics for the routes those selected gateways have to the destination
  d) Generate a list of gateways according to the following rules:
     
     1. primary sorting key: carrier code
        A matching carrier code is preferred over the "all" carrier code.
        The default value is "all".

     2. secondary sorting key (to be applied if two items have the same primary key):
        longest match

     3. tertiary sorting key (to be applied if two items have the same secondary key):
	metric

  e) use gateways in list order (gateway with equal carrier code AND equal prefix length
     AND equal metric shall be used round-robin)

- feature: implement alternate routing
  watch for either TCP or PBX errors, i.e. TCP errors on H.225 connection
  establishment or PBX side error codes in response to sending Q.931 SETUP
  (like no circuit/channel available)

- feature: make RasSrv multithreaded
  we need this since more & more subroutine calls are made to external entities
  (databases) and we must wait for the answer to continue processing.
  Since RasSrv is single-threaded, latencies of external calls sum up and
  thus define a limit (e.g. if an external call takes 100 msec, then we can
  only do 10 calls per sec. before RasSrv starts queueing requests).

- feature: route call to voicemail mailbox for calls to provisioned, but
  non-registered destinations (i.e. those that result in calledpartyNotRegistered)
  Mailbox should be a configurable H.323 endpoint (running e.g. OpenAM).

- feature: loop detection & prevention
  (mobile forwarded to office number while office number forwarded to mobile ...)
  Idea: only allow <n> calls from the same originator within <m> seconds
  
- feature: implement portability database
  We need to run a (LDAP based ?) database of all numbers/numbering spaces
  of those carriers an ITSP is (VoIP-)interconnected to in order to
  decide whether and how to route a call to a destination that is owned by
  that carrier (i.e. the number is ported to his network).
  Idea: Numbers are stored in the same format as CPE numbers are. Querying 
  the database yields a carrier code.
  That carrier code is a per-route per-gateway parameter (default: "all")
  that takes precedence over the other parameters (prefix length and metrics).

- fix: GRQ should be authenticated against [DB][Alias|Password]Auth, too.
       (currently default=allow is required to stop GK from sending GRJ)

- fix: move MySQLAliasAuth into DBAliasAuth scheme

- feature: ability to use caller's cc, ac, sn placeholders in RewriteE164
  So e.g. emergency calls can be implemented as "911=<cc><ac>911"

- fix: honor Q.931 "sending complete" flag

- fix: Forwarding to alternate GK doesn't use GKHome as it's sender address

- fix: the ACF event signalled by PrintCurrentCalls should match
  the format of the regular ACF (needed for gkgui)

- fix: generation of CallProceeding messages is broken. The current
  version forwards the CallProceeding messages generated by the endpoints.
  To get the broken version compile with -D GENERATE_CALL_PROCEEDING

- debug: call forwarding with ohphone (using Facility message)
  doesn't work in GK routed-mode. User-User info n Facility
  seems corrupt.

- debug: problems with FastStart in routed mode (eg. Siemens LP 5100
  or Netergy adapter)

- feature: mplement gatekeeper performed H.450.2 Call Transfer ?
  gatekeeper routed, gatekeeper transparent mode works already

- we need a GUI client to visualize the status messages (Java GUI started)

- feature: implement codec selection (caller-, callee-dependant)

- feature: implement source based routing: for mobile numbers (and others,
  possibly), routing should be done based on *A* number.
  Since the breakout gateway doesn't make a difference in terms of cost,
  routing to the breakout gateway closest to the originator minimizes
  on-net costs.

- feature: implement call interception (for legal purposes)

- feature: implement call distribution based on:
  * static percentage
  * time of day
  * overflow (i.e. first concurrent n calls go to destination 1,
    all additional calls to destination 2)

- The resourceManager should use the new CallTable and don't keep
  it's on list of resource allocations.

- load testing: how many concurrent calls can be made with the
  gatekeeper on what hardware ? how does the memory requirement
  grow ? when is the slowdown to high ?

