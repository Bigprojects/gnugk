###############################################################
##
## File: ~/gatekeeper.ini
## comments may start with # or ;
##
## Boolean values are represented by a case insensitive string
## - "t"..., "y"... or "1" for TRUE and all other for FALSE.
##
###############################################################


##
## Params used in Gatekeeper::Main()
##
## NOTE: These parameters are loaded at program startup and not influenced by a reload or HUP signal.
##

[Gatekeeper::Main]
# 'config is present' indicator. Has to be 42.
Fourtytwo=42
# Includes in some RAS-Msgs
Name=OpenH323GK
# overwritten from command line parameter
#Home=195.71.129.69
#NetworkInterfaces=
#TimeToLive=600
#TotalBandwidth=100000
#StatusPort=7000
#UseBroadcastListener=0
##
## Failover support
##
#AlternateGKs=1.2.3.4:1719:false:120:OpenH323GK2
#Sendto=1.2.3.4:1719
#EndpointIDSuffix=_gk1
#SkipForwards=4.3.2.1
#RedirectGK=Calls > 50
##
## You should never need to change any of the following values.
## They are mainly used for testing or very sophisticated applications.
##
#UnicastRasPort=1719
#MulticastPort=1718
#MulticastGroup=224.0.1.41
#EndpointSignalPort=9999
#EndpointSignalPort=1720
#ListenQueueLength=1024
# [ms], default 1000
#SignalReadTimeout=3000
# [ms], default 3000
#StatusReadTimeout=5000


[RoutedMode]
GKRouted=1
H245Routed=0
CallSignalPort=1721
CallSignalHandlerNumber=1
RemoveH245AddressOnTunneling=0
AcceptNeighborsCalls=1
AcceptUnregisteredCalls=0
SupportNATedEndpoints=1
DropCallsByReleaseComplete=1
#RemoveCallOnDRQ=1
#SendReleaseCompleteOnDRQ=0
#Q931PortRange=20000-20999
#H245PortRange=30000-30999


[Proxy]
#Enable=1
#InternalNetwork=10.0.1.0/255.255.255.0,127.0.0.0/8
#T120PortRange=40000-40999
#RTPPortRange=50000-59999


##
## used when registering our gk as a gateway with another gk
##

[Endpoint]
#Gatekeeper=auto
#Gatekeeper=210.58.112.188
#Type=Gateway
#H323ID=CitronProxy
#E164=18888600000
#Password=
#Prefix=18888600,1888890003
#TimeToLive=900
#RRQRetryInterval=10
#ARQTimeout=2
#UnregisterOnReload=0
#NATRetryInterval=60
#NATKeepaliveInterval=86400


#[Endpoint::RewriteE164]
#188889000=9


##
## Prefixes of e164 numbers for gateways.
## Left hand side is the H.323 Alias, right hand side the list of prefixes.
## Separate prefixes by one of " .,\t".
##
#############################################################
## NOTE: Use of this section is depreciated.
## Use telephonenumber= in [RasSrv::EndpointOptions] instead.
## For now, telephonenumbers from [RasSrv::EndpointOptions] and
## entries here are merged together, but you REALLY SHOULD use 
## [RasSrv::EndpointOptions].
#############################################################
##
## These parameters honor a reload or HUP signal.
##

[RasSrv::GWPrefixes]
## Test-Gateways
#rossi-gt2=80,90
#rossi-gt2=0
#rossi-gt3=80,90
#rossi-gt3=05241,0521,5241,521


##
## Per-endpoint options.
##
#############################################################
## NOTE: YOU NEED TO UNDERSTAND AND CONFIGURE THIS SECTION
#############################################################
##
## For valid attribute names: see [GkDatabase::DBAttributeNames].
## Separate attributes by ";", key/value pairs by "=" and
## values (if there are more than one for one attribute) by ","
## Attribute "voIPEndpointType" can be: "trunk" or "cpe".
##
## For a call ep1 -> GK -> ep2, you need to use this section to configure
## profiles for both, ep1 and ep2.
## This is also true if ep1 is a parent gatekeeper or neighbor.
## If you don't, routing calls will very likely fail.
##
##

[RasSrv::EndpointOptions]
ep_1=voIPEndpointType=cpe;telephoneNumber=49524670567;voIPlocalAccessCode=0;voIPnationalAccessCode=00;voIPinternationalAccessCode=000;voIPspecialDial=110=49524675123,112=49524675456;plaintextPassword=abc123
gw_1=voIPEndpointType=trunk;voIPCountryCode=49;voIPIpAddress=195.71.226.162


##
## Per-endpoint authentication.
##

[RasSrv::RRQAuth]
## On RRQs, the h323-alias is retrieved from this section.
## If there is an entry, the endpoint is authenticated against these rules.
## If there is no entry the default action is performed. The default action
## is to confirm the RRQ, unless the parameter "default=reject" is given.
## These parameters honor a reload or HUP signal.
##
## Notation:
##   <authrules> :=  empty  |  <authrule> "&" <authrules>
##   <authrule>  := <authtype> ":" <authparams>
##   <authtype>  := "sigaddr" | "sigip"
##   <autparams> := [!&]*
## The notation and meaning of <authparams> depends on <authtype>:
## - sigaddr: extended regular expression that has to match against the
##     "PrintOn(ostream)" representation of the signal address of the request.
##     Example: "sigaddr:.*ipAddress .* ip = .* c3 47 e2 a5 .*port = 1720.*"
## - sigip: specialized form of "sigaddr". Write the signalling ip adresse
##     using (commonly used) decimal notation: "byteA.byteB.byteC.byteD:port"
##     Example of the above sigaddr: "sigip:195.71.226.165:1720"
##

#rossi-gt2=sigaddr:.*ipAddress .* ip = .* c3 47 e2 a2 .*port = 1720.*
#rossi-gt2=sigip:195.71.226.162:1720

#rossi-gt3=sigaddr:.*ipAddress .* ip = .* c3 47 e2 a5 .*port = 1720.*
#rossi-gt3=sigip:195.71.226.165:1720

default=confirm


##
## The parameter "rule" may be one of the following:
## - "forbid":    disallow any connection (default when no rule us given)
## - "allow":     allow any connection
## - "explicit":  read the parameter #"<ip>=<value>"# where ip is the ipv4-address
##                of the client. #<value># is resolved using #Toolkit::AsBool#. If the
##                ip is not listed the param "default" is used.
## - "regex":     the #<ip># of the client is matched against the given regular expression.
##                First the ip-rules (like "explicit") are tested. Only of no such param
##                exists, the regex is tried.
##                Example: "regex=^195\.71\.(129|131)\.[0-9]+$"
##

[GkStatus::Auth]
rule=allow
#rule=deny
#rule=explicit
#rule=regex
#regex=^(195\.71\.(129|100)\.[0-9]+)|(62\.52\.26\.[1-2][0-9][0-9])$
# only used when "rule=explicit"
#default=forbid


##
## Number rewriting 
##
## This is the general number rewriting. There's also a number rewriting specific to
## child/parent GK configurations, see #[Endpoint::RewriteE164]# for that one.
## This is done within the Q.931 signalling channel, so it'll only work if you have
## enabled routed mode !
## Every number to be rewritten has its own key/value-line.
## The implemententation is such that all numbers that shell be rewritten have to begin
## with a common prefix given by 'Fastmatch'. Only one Fastmatch line can be given.
## Leave Fastmatch empty (that's the default) to avoid hassle.
## The rewrite-numbers function take care of reloads/a HUP signal.
##

[RasSrv::RewriteE164]
#Fastmatch=
#0190703100=052418088663
#01903142=0521178260


##
## Neighborhood relations
##
## The GK send LRQ to its neighbors ***ONLY*** if the destination of ARQ is otherwise
## unknown. For a gateway w/ prefix 123 and a neighbor w/ prefix 1234, 12345 is
## routed to the gateway !! It's a TODO - DON'T ASK !
## A neighbor is selected if its prefix match the destination or it has prefix '*'.
## Currently only one prefix is supported.
## You can configure multiple lines for a single gatekeeper, though.
##
##
## Syntax: GKID=ip[:port;prefix;password]
##

[RasSrv::Neighbors]
#GK1=203.60.151.5:1719;*;gk1
#GK2=203.60.151.9:1719;02


[RasSrv::RRQFeatures]
#AcceptGatewayPrefixes=1


[RasSrv::ARQFeatures]
#ArjReasonRouteCallToSCN=0
#ArjReasonRouteCallToGatekeeper=1


[RasSrv::LRQFeatures]
#NeighborTimeout=2
#ForwordHopCount=2
#IncludeDestinationInfoInLCF=1


##
## In this section you can put endpoints that don't have RAS support or that
## you don't want to be expired. The entries will always remain in GK's
## registration table. However, You can still unregister them via status thread.
##
## Syntax: ip[:port]=alias,alias,...[;prefix,prefix,...]
##

[RasSrv::PermanentEndpoints]
# For gateway
#10.0.1.5=Citron;009,008
# For terminal
#10.0.1.10=798


##
## Authentication mechanism
##
## Syntax:
##   authrule=actions
##
##   <authrule> := SimplePasswordAuth | DBPasswordAuth
##                 | AliasAuth | DBAliasAuth | ...
##   <actions>  := <control>[;<ras>,<ras>,...]
##   <control>  := alternative | optional | required | sufficient
##   <ras>      := GRQ | RRQ | URQ | ARQ | BRQ | DRQ | LRQ | IRQ
##
## Currently supported modules:
##
##   SimplePasswordAuth/
##   DBPasswordAuth      The module checks the tokens or cryptoTokens
##                       fields of RAS message. The tokens should contain
##                       at least generalID and password. For cryptoTokens,
##                       cryptoEPPwdHash tokens hashed by simple MD5 and
##                       nestedcryptoToken tokens hashed by HMAC-SHA1-96
##                       (libssl must be installed!) are supported now.
##                       The ID and password are read from [Password] section
##                       / Database. Support for other backend databases is
##                       easily to add.
##
##   AliasAuth/
##   DBAliasAuth         The IP of an endpoint with given alias should
##                       match a specified pattern. For AliasAuth the pattern
##                       is defined in [RasSrv::RRQAuth] section.
##                       For DBAliasAuth the alias (default: mail attribute)
##                       and IP (default: voIPIpAddress attribute) must be found
##                       in one database entry.
##
## A rule may results in one of the three codes: ok, fail, pass.
##
##   ok         The request is authenticated by this module
##   fail       The authentication fails and should be rejected
##   next       The rule cannot determine the request
##
## There are also four ways to control a rule:
##
##   alternative   If this rule is not applicable to the request, it is passed
##                 to next rule. If the answer is positive, the request is
##		   confirmed. If the answer is negative, the request is passed
##		   on to the next rule.
##   optional      If this rule is not applicable to the request, it is passed
##                 to next rule. Otherwise, the output determines the
##		   answer, i.e. the request is either confirmed or denied.
##		   In that case, the request is NOT passed on to the next rule.
##   required      The request should be authenticated by this module, or it is
##                 rejected. The authenticated request will then be passed on to
##                 the next rule.
##   sufficient    If the request is authenticated, it is accepted,
##                 else it is rejected. The processing stops here. That is, the
##                 rule determines the fate of the request. No rule should be put
##                 after a sufficient rule, since it won't take effect.
##
##
##  A rule is not applicable if e.g
##    a [Simple|DB]PasswordAuth rule cannot be applied if the request does not contain CryptoTokens
##    a DBAliasAuth cannot be applied if the database entry does not contain the alias field
##
## You can also configure a rule to check only for some particular RAS
## messages. For example, to configure SimplePasswordAuth as a required
## rule to check RRQ, ARQ and LRQ:
## SimplePasswordAuth=required;RRQ,ARQ,LRQ
##


[Gatekeeper::Auth]
#SimplePasswordAuth=optional
#DBPasswordAuth=optional
#AliasAuth=sufficient;RRQ
#DBAliasAuth=sufficient;RRQ
#default=reject
default=allow


##
## Destination analysis mechanism
##
## *** NOTE: YOU NEED THIS SECTION ***
##
## You *must* configure a destination analysis mechanism, or your ARQs result
## in "ARJ - called party not registered".
##
## Syntax:
##   authrule=actions
##
##   <authrule> := OverlapSendDestAnalysis
##   <actions>  := <control>[;<message>,<message>,...]
##   <control>  := optional | required | sufficient
##   <message>  := ARQ | LRQ
##
## Currently supported modules:
##
##   OverlapSendDestAnalysis    This module checks for incomplete destination
##                              addresses. It's also a superset of the "classic"
##				destination analysis used in 2.0.
##
##   BlackListDestAnalysis      This module checks Blacklisted numbers. The
##				precedence of Blacklisting and Whitelisting
##				is per-endpoint configurable (voIPWhiteListBeforeBlackList).
##                              BlackListDestAnalysis implies an OverlapSendDestAnalysis was also
##                              done before this to find an endpoint because blacklisting is a
##				endpoint-dependant option.
##
##   Currently, only outbound calling can be blocked. Inbound blocking is not yet implemented.
##

## Example 1:
## [RasSrv::EndpointOptions]
## callingEP=voIPWhiteListBeforeBlackList=TRUE;voIPprefixOutgoingWhiteList=49;voIPprefixOutgoingBlackList=49190
##
## This means only calls to 49* (aka Germany) are allowed. Rest of the world is forbidden!
## Calls to 49190* (German premium rate services) are forbidden too. The rest of the world was forbidden
## in the WhiteList rule.

## Example 2:
## [RasSrv::EndpointOptions]
## callingEP=voIPWhiteListBeforeBlackList=FALSE;voIPprefixOutgoingBlackList49;voIPprefixOutgoingWhiteList=49521;
## voIPprefixOutgoingWhiteList=495246
##
## That means calls to 49* (aka Germany) are disallowed. Rest of the world is
## allowed (do you really want this?)!
## Only calls to 49521 (Bielefeld) and 495246 (Verl) are ok, the rest of germany is disallowed.

[Gatekeeper::DestAnalysis]
OverlapSendDestAnalysis=optional;ARQ
#BlackListDestAnalysis=alternative;ARQ
default=reject


##
## Use 'make addpasswd' to generate the utility addpasswd
## Usage: addpasswd config userid password
##

[Password]
#KeyFilled=123
#(id=cwhuang, password=123456)
#cwhuang=UGwUtpy837k=


[MySQLAuth]
#Host=localhost
#Database=billing
#User=cwhuang
#Password=123456
#Table=customer
#IDField=IPN
#PasswordField=Password
#CheckEnableField=Active


[CallTable]
#GenerateNBCDR=TRUE
#GenerateUCCDR=TRUE
# Default is to terminate every call after 6 hours
#DefaultCallTimeout=21600


##
## The databases which are used for endpoint configuration.
##
## *** NOTE: YOU NEED THIS SECTION ***
##
## The databases are searched for a config in the same order as they
## are listed here.
##

[Gatekeeper::Databases]
IniFile=TRUE
#LDAP=TRUE


##
## the attribute names used for database access, the default is the names
## from the LDAP-VoIP-schema which is provided in the etc/ directory
## See that file for explanations of the fields.
## Note that this applies to non-LDAP databases (.ini file, MySQL) as well !
##

[GkDatabase::DBAttributeNames]
#H323ID=mail
#TelephoneNumber=telephoneNumber
# attribute "voIPEndpointType" can be: "trunk"|"cpe".
#EndpointType=voIPEndpointType
#FacsimileTelephoneNumber=facsimileTelephoneNumber
#H235PassWord=plaintextPassword
#IPAddress=voIPIpAddress
#CountryCode=voIPCountryCode
#LocalAccessCode=voIPlocalAccessCode
#NationalAccessCode=voIPnationalAccessCode
#InternationalAccessCode=voIPinternationalAccessCode
#MainTelephoneNumber=voIPmainTelephoneNumber
#SubscriberTelephoneNumber=voIPsubscriberTelephoneNumber
#CallingLineIdRestriction=voIPcallingLineIdRestriction
#SpecialDial=voIPspecialDial
#HonorsARJincompleteAddress=voIPhonorsARJincompleteAddress
#PrefixOutgoingBlacklist=voIPprefixOutgoingBlacklist
#PrefixOutgoingWhitelist=voIPprefixOutgoingWhitelist
#PrefixIncomingBlacklist=voIPprefixIncomingBlacklist
#PrefixIncomingWhitelist=voIPprefixIncomingWhitelist
#PrependCallbackAccessCode=voIPprependCallbackAccessCode


## 
## Settings for LDAP access
## 
## ServerName:   The LDAP server's DNS name.
## ServerPort:   The LDAP server's TCP port (usually 389).
## SearchBaseDN: entry point into the server's LDAP tree structure.
##               Searches are only made below this root node.
## BindUserDN:   The distinguished name the gatekeeper uses to bind
##               to the LDAP server. Leave empty if you want to access
##               the LDAP server anonymously.
## BindUserPW:   If you specified BindUserDN, then specify the corresponding
##               password to be used for binding here.
## sizelimit:    Maximum number of results the server may return in response
##               to a single search query. The gatekeeper expects each LDAP
##               to only yields one or zero results anyway, so this parameter
##               is rather useless.
##               Usually that's restricted on the server side, anyway.
## timelimit:    maximum number of seconds a query may take until it's
##               considered as "failed".
## 

[GkLDAP::Settings]
#ServerName=ldap
#ServerPort=389
#SearchBaseDN=o=University of Michigan, c=US
#BindUserDN=cn=Babs Jensen,o=University of Michigan, c=US
#BindUserPW=ReallySecretPassword
#sizelimit=0
#timelimit=0


##
## LDAP Cache:
##
## Enable (boolean):    switch caching on/off. Default: off
## TTL (boolean):       maximum time (in seconds) a cache entry may have.
## MaxMemory (integer): maximum amount of memory used in cache
##
## With internal cache the amount of results is computed by:
## maxresults=MaxMemory/CACHE_AVERAGE_SEARCH_SIZE
## CACHE_AVERAGE_SEARCH_SIZE is set in gk_ldap_interface.h to 10.
##

[LDAPCache]
Enable=TRUE
#TTL=60
#MaxMemory=10000


##
## Digit Analysis general section,
## You may specify to override(!) the file for the E.164 defined Country Codes,
## in <code>;<descr> syntax.
## Since most if not all country codes are compiled in, you shouldn't need to touch this.
##

[DigitAnalysis::General]
#CountryCodes=cc.dat


##
## Digit Analysis special section: the keys here have to be E.164 defined
## Country Codes and their value might either be a valid file name or a
## valid function identifier. In case a file is specified, it must
## contain the National Destination Codes (NDC) for that Country Code in
## <code>;<descr> syntax. The function identifier selects a functional
## way to extract the NDC from a given digit sequence.
## Current supported functions are "NorthAmericanNumberingPlan"
## and the "AustralianNumberingPlan".
## The gatekeeper already knows how to use "simple" numbering plans like the
## widely used North American and the Australian one.
## More complicated ones, in particular those with variable-length area codes,
## need to be defined in the appropriate file.
## There is already a large number of national dialling plans available in
## the CodesDB/ directory
##

[DigitAnalysis::Functor]
1=NorthAmericanNumberingPlan
#49=49.dat

##
## the shared secret for the symetric ciphers used to secure 'plaintext'
## passwords needed for challenge response authentification. LHS the
## cipher's prefix (as used by LDAP for instance); RHS is the base64
## encoded password (shared secret). The actual key used is the MD5
## digest of the password.
##

[PlaintextPasswd::SharedSecret]
#{BF}=cHc=

# EOF
